"""
DocMentor main application.
"""

import streamlit as st
import os
from pathlib import Path
from core.modes import PrivateMode, PublicMode
import tempfile

# Configure page
st.set_page_config(
    page_title="DocMentor - AI Medical Assistant",
    page_icon="üè•",
    layout="wide",
)

# Initialize session state
if 'current_mode' not in st.session_state:
    st.session_state.current_mode = None
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'documents' not in st.session_state:
    st.session_state.documents = []

def initialize_mode(mode_type: str):
    """Initialize operation mode."""
    base_path = Path(tempfile.gettempdir()) / "docmentor"
    if mode_type == "private":
        return PrivateMode(storage_path=base_path / "private")
    else:
        return PublicMode(storage_path=base_path / "public")

# Title and description
st.title("üéì DocMentor")
st.subheader("–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")

# Mode selector
with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã", expanded=True):
    col1, col2 = st.columns([3, 1])
    with col1:
        mode = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
            ["üìö –ü—Ä–∏–≤–∞—Ç–Ω—ã–π", "üåê –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π"],
            horizontal=True,
            help="–í –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ. –í –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π.",
            key="mode_selector"
        )

    # Initialize or update mode
    current_mode = "private" if mode == "üìö –ü—Ä–∏–≤–∞—Ç–Ω—ã–π" else "public"
    if st.session_state.current_mode != current_mode:
        st.session_state.current_mode = current_mode
        st.session_state.mode_handler = initialize_mode(current_mode)
        st.rerun()

# Document management
st.subheader("üìÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")

# Document upload
uploaded_files = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª—ã —É—á–µ–±–Ω–∏–∫–æ–≤ –∏–ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤",
    type=["pdf"],
    accept_multiple_files=True,
    help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã PDF –¥–æ 200MB"
)

# Process uploaded documents
if uploaded_files:
    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤..."):
        for uploaded_file in uploaded_files:
            # Save uploaded file temporarily
            temp_dir = Path(tempfile.gettempdir()) / "docmentor_uploads"
            temp_dir.mkdir(exist_ok=True)
            temp_path = temp_dir / uploaded_file.name
            
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getvalue())
            
            try:
                # Process document
                result = st.session_state.mode_handler.process_document(
                    temp_path,
                    metadata={"source": uploaded_file.name}
                )
                st.success(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                
                # Add to session documents
                if uploaded_file.name not in [doc['name'] for doc in st.session_state.documents]:
                    st.session_state.documents.append({
                        'name': uploaded_file.name,
                        'metadata': result['metadata']
                    })
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {uploaded_file.name}: {str(e)}")
            finally:
                # Cleanup
                if temp_path.exists():
                    temp_path.unlink()

# Display document list
if st.session_state.documents:
    st.write("üìö –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
    for doc in st.session_state.documents:
        with st.expander(f"üìñ {doc['name']}"):
            st.json(doc['metadata'])

# Chat interface
st.subheader("üí¨ –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")

# Chat input
user_question = st.text_input(
    "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –º–µ–¥–∏—Ü–∏–Ω–µ:",
    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ø–∏—à–∏—Ç–µ –ø–∞—Ç–æ–≥–µ–Ω–µ–∑ –±—Ä–æ–Ω—Ö–∏–∞–ª—å–Ω–æ–π –∞—Å—Ç–º—ã"
)

if user_question:
    with st.spinner("–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..."):
        try:
            # Search for relevant information
            results = st.session_state.mode_handler.search(
                user_question,
                k=4
            )
            
            # Add to chat history
            st.session_state.chat_history.append({
                "role": "user",
                "content": user_question
            })
            
            # Format and display response
            if results:
                response = "–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:\n\n"
                for result in results:
                    response += f"üìñ {result['metadata'].get('filename', '–î–æ–∫—É–º–µ–Ω—Ç')}:\n{result['text']}\n\n"
            else:
                response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö."
                
            st.session_state.chat_history.append({
                "role": "assistant",
                "content": response
            })
            
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞: {str(e)}")

# Display chat history
st.write("üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:")
for message in st.session_state.chat_history:
    if message["role"] == "user":
        st.markdown(f"üë§ **–í—ã**: {message['content']}")
    else:
        st.markdown(f"ü§ñ **–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç**: {message['content']}")

# Settings and information
with st.sidebar:
    st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.markdown("""
    **DocMentor** - —ç—Ç–æ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.
    
    **–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:**
    - üìö –ü—Ä–∏–≤–∞—Ç–Ω—ã–π: –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
    - üåê –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π: –¥–æ—Å—Ç—É–ø –∫ –æ–±—â–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    
    **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
    - –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—á–µ–±–Ω–∏–∫–æ–≤
    - –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    """)
    
    if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
        st.session_state.chat_history = []
        st.rerun()